private void setPayables() throws SQLException{
       
        cancelledPenalty=0.0;
                 setPaymentTable(connectWbcs.getAllRecord("Select  RTRIM(LTRIM(Name)) as Name, RTRIM(LTRIM(B.BillNumber)) as Bill#, RTRIM(LTRIM(C.AccountNumber)) as Acct#, CONVERT (varchar,Period,101) as Period, "
                                                    +" TotAmount =  CONVERT(VARCHAR(20), (CONVERT(MONEY,CONVERT(VARCHAR(20),B.CuMAmount,1),1) +  CONVERT(MONEY,CONVERT(VARCHAR(20),isnull(B.GarbageCharges,0),1),1) + CASE When " 
                                                           + " (cast(convert(char(10), getdate(),101) as datetime)) <= B.DueDate then 0.0 else ROUND((B.NetAmount * (SELECT convert(MONEY, convert(varchar,(surcharge /100),20)) from SystemDefaults) ),2) END    ) ,1), "
                                                    +" CumAmount = CONVERT(varchar(20), B.CuMAmount, 1) ,  "
                                                    +" Garbage  =  CONVERT (VARCHAR(20),isnull(B.GarbageCharges,0),1) ,  "
                                                    +" Penalty = CASE When (cast(convert(char(10), getdate(),101) as datetime)) <= B.DueDate then '0.0' else CONVERT(varchar(20), ROUND((B.NetAmount * (SELECT convert(MONEY, convert(varchar,(surcharge /100),20)) from SystemDefaults) ),2),1) END, "
                                                    +" Adjustment = isnull((Select NetAmount from Adjustment where BillNumber = B.BillNumber),0),  "
                                                    +" '0.00' as Bal, CONVERT (varchar,DueDate,101) as Duedate, 0.00 as Discount "
                                            +" from Bills as B  "
                                            +" INNER JOIN Customers AS c ON B.AccountNumber = C.AccountNumber "
                                            +" WHERE C.AccountNumber = '"+searchTable.getValueAt(0,0)+"' "
                                            +" and NOT EXISTS (SELECT AccountNumber FROM Payments as P where P.AccountNumber = B.AccountNumber and P.BillNumber = B.BillNumber) ORDER BY CONVERT(DATETIME,B.DueDate,101) DESC "));
                 
             
             if(paymentTable.getRowCount()>0){
                  try{
                      mobileNumbers.setText(connectWbcs.getSpecificData("DECLARE @categories varchar(200) "
                        +" SET @categories = NULL "
                        +" SELECT @categories = COALESCE(@categories + ', ','') + MobileNumber "
                        +" FROM ContactInformation where accountNumber = '"+searchTable.getValueAt(searchTable.getSelectedRow(),0)+"' "
                        +" ORDER BY MobileNumber "
                        +" SELECT @categories as contact"));
                  }
                  catch(Exception e1){}
                  add_mobileNumber.setEnabled(true);
              }
              else{
                  add_mobileNumber.setEnabled(false);
                  mobileNumbers.setText("");
              }
                 
              try{
                  computeAmountDue();
                  setSearchTable(new Object[0][0]);
                  searchField.setText("");
                  change.setText("");
              }   
              catch(Exception e){
                  e.printStackTrace();
              }
              
    }
=============================================================

private void computeAmountDue(){
    
        totConsumed = 0;
        for(ctr=0;ctr<paymentTable.getRowCount();ctr++){
            totConsumed = totConsumed + (Double.parseDouble(paymentTable.getValueAt(ctr,3).toString().replaceAll(",","")) - Double.parseDouble(paymentTable.getValueAt(ctr,10).toString().replaceAll(",","")) );
        }
        amountDue.setText(df2.format(totConsumed));
        amountTender.setText("");
        change.setText("");
        setSearchPane();
        setSearchTable(new Object[0][0]);
        
        
    }

============================================================

public void setPaymentTable(Object row[][]){
        
        paymentTable.setModel(new javax.swing.table.DefaultTableModel(
                row ,
                new String [] {
                    "Name","Bill#","Acct#","Period","Total-Amt","Consumed-Amt","Garbage","Penalty","Adjustment","Balance+Pen","DueDate","Discount"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.Double.class,java.lang.Double.class,java.lang.Double.class,java.lang.Double.class,java.lang.Double.class,java.lang.Double.class,java.lang.String.class,java.lang.Double.class
                };
                boolean[] canEdit = new boolean [] {
                   false,false,false,false,false,false,false,false,false,false,false,false
                };
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }
            });

            javax.swing.table.DefaultTableCellRenderer centerRenderer = new javax.swing.table.DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( javax.swing.JLabel.CENTER );
            centerRenderer.setBackground(new java.awt.Color(216, 228, 248));
            centerRenderer.setPreferredSize(new java.awt.Dimension(centerRenderer.getWidth(),25));
            centerRenderer.setForeground(new java.awt.Color(0,0,0).darker());

            paymentTable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder()));
            paymentTable.setFont(new java.awt.Font("Tahoma", 0, 12));
            paymentTable.setRowHeight(23);
            paymentTable.getTableHeader().setFont(new java.awt.Font("Cambria", 1, 13));
            paymentTable.getTableHeader().setDefaultRenderer(centerRenderer);
            paymentTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            paymentTable.getTableHeader().setReorderingAllowed(false);
            acceptPayment_pane.setViewportView(paymentTable);

            paymentTable.getColumnModel().getColumn(0).setPreferredWidth(180);
            paymentTable.getColumnModel().getColumn(1).setPreferredWidth(90);
            paymentTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            paymentTable.getColumnModel().getColumn(3).setPreferredWidth(90);
            paymentTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            paymentTable.getColumnModel().getColumn(5).setPreferredWidth(100);
            paymentTable.getColumnModel().getColumn(6).setPreferredWidth(100);
            paymentTable.getColumnModel().getColumn(7).setPreferredWidth(100);
            paymentTable.getColumnModel().getColumn(8).setPreferredWidth(100);
            paymentTable.getColumnModel().getColumn(9).setPreferredWidth(100);
            paymentTable.getColumnModel().getColumn(10).setPreferredWidth(100);
            paymentTable.getColumnModel().getColumn(11).setPreferredWidth(100);
            
            TableColumnModel m = paymentTable.getColumnModel();
            m.getColumn(4).setCellRenderer(NumberRenderer.getCurrencyRenderer());
            m.getColumn(5).setCellRenderer(NumberRenderer.getCurrencyRenderer());
            m.getColumn(6).setCellRenderer(NumberRenderer.getCurrencyRenderer());
            m.getColumn(7).setCellRenderer(NumberRenderer.getCurrencyRenderer());
            m.getColumn(8).setCellRenderer(NumberRenderer.getCurrencyRenderer());
            m.getColumn(9).setCellRenderer(NumberRenderer.getCurrencyRenderer());
            m.getColumn(11).setCellRenderer(NumberRenderer.getCurrencyRenderer());
            
            DefaultTableCellRenderer centerColRenderer = new DefaultTableCellRenderer();
            centerColRenderer.setHorizontalAlignment( JLabel.CENTER );
            m.getColumn(10).setCellRenderer( centerColRenderer );
            
            fct = new FixedColumnTable(1,acceptPayment_pane);
            fixedtable = fct.getFixedTable();
            
            paymentTablemodel =(DefaultTableModel) paymentTable.getModel();
            
    }