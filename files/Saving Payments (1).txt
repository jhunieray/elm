		 
======================SAVE BUTTON====================================

		totConsumed=0; totGarbage=0; totPenalty=0;
                    for(ctr=0;ctr<paymentTable.getRowCount();ctr++){
                        seq++;
                        isExecuted = insertPaymentsToWbcs_Cash(ctr,seq);
                        //isExecuted=true;
                        prevAccNumber=paymentTable.getValueAt(ctr,1).toString().trim();
                        totConsumed = totConsumed + (Double.parseDouble(paymentTable.getValueAt(ctr,4).toString().trim().replaceAll(",","")) - Double.parseDouble(paymentTable.getValueAt(ctr,10).toString().trim().replaceAll(",","")));
                        totGarbage = totGarbage + Double.parseDouble(paymentTable.getValueAt(ctr,5).toString().trim().replaceAll(",",""));
                        totPenalty = totPenalty + Double.parseDouble(paymentTable.getValueAt(ctr,6).toString().trim().replaceAll(",",""));
                        if(isExecuted ==false){
                            break;
                        }
                    }//close sa loop
                    
                    //inserting and updating etracs database
                     if(isExecuted){
                       
                         
                         info = connectWbcs.getSpecificRow("SELECT RTRIM(LTRIM(Address)) as address,(SELECT RTRIM(LTRIM(IncomeAccountObjid)) as obji1 FROM IncomeAccount where description = 'Consumed Amount') as consumedAmount, "+
                                                                " (SELECT RTRIM(LTRIM(IncomeAccountObjid)) as obji1 FROM IncomeAccount where description = 'Garbage') as garbage, "+
                                                                " (SELECT RTRIM(LTRIM(IncomeAccountObjid)) as obji1 FROM IncomeAccount where description = 'Penalty') as penalty "+
                                                                " FROM Customers WHERE accountNumber = '"+paymentTable.getValueAt(0,1).toString().trim()+"'"); 
                        
                            
                                if(municipalOR.getText().trim().split("-").length > 1){
                                    series = municipalOR.getText().trim().split("-")[1].trim();
                                }
                                else{
                                   series =  municipalOR.getText().trim();
                                }
                                /*System.out.print("\n\n SEries: "+series.trim());
                                System.out.print("\n serial: "+setSerialNo(municipalOR.getText().trim()));
                                System.out.print("\n serial: "+setSerialNo(municipalOR.getText().trim()));*/
                                
                                while(true){
                                        receiptObjid = generateObjid("MISCRCT-"+generatedYear+"-","Receipt");
                                        genObjid = generateTwoObjid("RCTI-"+generatedYear+"-","ReceiptItem");
                                        try{
                                            isExecuted = connectEtracs.executeThisQuery("INSERT INTO Receipt (DTYPE,objid,txndate,dtposted,payername,payeraddress,paidby,collectorId,collectorName,collectorTitle,mode,amount,series,serialNo,collectionTypeId,collectionTypeName,afissuedid) " +
                                                                          " (SELECT top 1 'MiscReceipt', " +
                                                                          " '"+receiptObjid+"', " +
                                                                          " '"+dateFormat.format(dateFormat.parse(ETRACS_BuddyView.today.getText().trim()))+"',  " +
                                                                          " '"+timedateFormat.format(timedateFormat.parse(ETRACS_BuddyView.today.getText().trim() +" "+ ETRACS_BuddyView.time.getText().trim()))+"', " +  
                                                                          " '"+ append(fixedtable.getValueAt(0,0).toString().trim())+"', " +
                                                                          " '"+info[0].trim()+"'," +
                                                                          " '"+ append(fixedtable.getValueAt(0,0).toString().trim())+"', " +
                                                                          " RTRIM(LTRIM(sys_user.objid)) AS objid, " +
                                                                          "  RTRIM(LTRIM(sys_user.firstname)) + ' ' + RTRIM(LTRIM(sys_user.middlename)) + ' ' + RTRIM(LTRIM(sys_user.lastname)) AS name, " +
                                                                          " RTRIM(LTRIM(OrgUnit.jobtitle)) AS JOB, " +
                                                                          "  'ONLINE', " +
                                                                          " CAST( "+Double.parseDouble(amountDue.getText().trim().replaceAll(",", ""))+" AS MONEY), " +
                                                                          " "+Integer.parseInt(series.trim())+", " +
                                                                          " '"+setSerialNo(municipalOR.getText().trim())+"', " +
                                                                          " 'CT_GEN', 'GENERAL COLLECTION', " +
                                                                          " (SELECT top 1 RTRIM(LTRIM(objid)) from AFControl where currentseries = "+Integer.parseInt(series.trim())+" AND currentseries <= endseries AND mode = 0 and afId='51') " +
                                                                          " FROM  sys_user INNER JOIN "+
                                                                          " OrgUnit_sys_user ON sys_user.objid = OrgUnit_sys_user.assignees_objid "+
                                                                          " INNER JOIN OrgUnit ON OrgUnit_sys_user.OrgUnit_objid = OrgUnit.objid "+
                                                                          " WHERE (sys_user.objid = '"+ETRACS_BuddyView.collectorId.getText().trim()+"')); " +
                                              " INSERT INTO ReceiptItem (objid,amount,parentid,acctid)  VALUES( '"+genObjid[0]+"', CAST( "+totConsumed+" AS MONEY),'"+receiptObjid+"','"+info[1].trim()+"' );" +
                                              " INSERT INTO ReceiptItem (objid,amount,parentid,acctid)  VALUES( '"+genObjid[1]+"', CAST( "+Double.parseDouble(df1.format(totGarbage).replaceAll(",",""))+" AS MONEY),'"+receiptObjid+"','"+info[2].trim()+"');" +
                                              " INSERT INTO PaymentMethod(DTYPE,objid,amount,cashreceived,parentid) values('CashPaymentMethod','"+generateObjid("PMM-"+generatedYear+"-","PaymentMethod")+"', CAST( "+Double.parseDouble(amountDue.getText().trim().replaceAll(",",""))+" AS MONEY), CAST( "+Double.parseDouble(amountTender.getText().trim().replaceAll(",",""))+" AS MONEY),'"+receiptObjid+"' ); " +
                                              " Update AFControl set currentseries = '"+(Integer.parseInt(series.trim()) + 1 )+"',issuedto = '"+ Integer.parseInt(series.trim()) +"',totalQtyIssued =  (Select totalQtyIssued + 1 from AFControl  where currentseries = "+Integer.parseInt(series.trim())+" AND currentseries <= endseries AND mode = 0 and afId='51')  where currentseries = "+Integer.parseInt(series.trim())+" AND currentseries <= endseries AND mode = 0 and afId='51' ");
                                            
                                        }
                                        catch(Exception e3){
                                        }  
                                        if(isExecuted==true){
                                               break;
                                        }
                                }
                                if(isExecuted==true){
                                    if(totPenalty >= 0.10){
                                              try{
                                                isExecuted = connectEtracs.executeThisQuery("INSERT INTO ReceiptItem (objid,amount,parentid,acctid)  VALUES( '"+generateObjid("RCTI-"+generatedYear+"-","ReceiptItem")+"', CAST( "+Double.parseDouble(df1.format(totPenalty).replaceAll(",",""))+" AS MONEY),'"+receiptObjid+"','"+info[3].trim()+"' )");
                                              }
                                             catch(Exception e2){e2.printStackTrace();}

                                    }
                                }
                             
                              totConsumed=0; 
                              totGarbage=0; 
                              totPenalty=0;
                          
                     }//close sa if(isExecuted){
                     
                 
                //}//close sa if(single_radio.isSelected()){
                else{ //if(single_radio.isSelected()){
                       
                }//close sa else{ //if(single_radio.isSelected()){
                

                

                 if(isExecuted){

                      if(javax.swing.JOptionPane.showConfirmDialog(null,"Do you want to print the payments Official Receipt?","CONFIRMATION",javax.swing.JOptionPane.YES_NO_OPTION) == 0) {
                            try{
                                PrintReceipt print=new PrintReceipt();
                                print.createPdf(paymentTable.getValueAt(0,1).toString().trim(),paymentTable,"Cash",municipalOR.getText().trim());
                                print.displayPdf();
                            }
                            catch(Exception e){
                                e.printStackTrace();
                                javax.swing.JOptionPane.showMessageDialog(null, "The process cannot access the file because it's either in used or already open.\n Closed first the previous file before opening this file.","ERROR",javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                      }
                      
                      setPaymentTable(new Object[0][0]);
                      setSearchPane();
                      setSearchTable(new Object[0][0]);
                      searchField.setText("");
                      municipalOR.setText("");
                      amountTender.setText("");
                      amountDue.setText("0.00");
                      clearPaymentMode();
                      mobileNumbers.setText("");
                      add_mobileNumber.setEnabled(false);
                      /*try{
                          viewPaymentList();
                      }catch(Exception e){e.printStackTrace();}*/
                        try{
                            generateOR.doClick();
                        }
                        catch(Exception e){

                        }


//=========================================================


private boolean insertPaymentsToWbcs_Cash(int tablerow,int seq) {
        try {
              //inserting payments table in wbcs database
              isExecuted = connectWbcs.executeThisQuery("Insert into Payments (AccountNumber,Period,BillNumber, Amount, Penalty, " +
                                                                    " Adjustments, OtherCharges, Discounts, Arrears, TotalAmount, " +
                                                                    " Collector, DCRNumber, PaymentDate, PaymentTime, Mode, Seq, ORNumber2) " +
                                                                    " (SELECT '"+paymentTable.getValueAt(tablerow,1).toString().trim()+"'," +
                                                                    " '"+dateFormat.format(dateFormat.parse(paymentTable.getValueAt(tablerow,2).toString().trim()))+"', " +
                                                                    " '"+Integer.parseInt(paymentTable.getValueAt(tablerow,0).toString().trim())+"', " +
                                                                    " CAST( "+ df1.format( Double.parseDouble(paymentTable.getValueAt(tablerow, 4).toString().trim().replaceAll(",", ""))  + Double.parseDouble(paymentTable.getValueAt(tablerow, 5).toString().trim().replaceAll(",", "")))+" AS MONEY), " +
                                                                    " CAST( "+ Double.parseDouble(paymentTable.getValueAt(tablerow, 6).toString().trim().replaceAll(",", ""))+" AS MONEY), " +
                                                                    " CAST( "+ Double.parseDouble(paymentTable.getValueAt(tablerow, 7).toString().trim().replaceAll(",", ""))+" AS MONEY), " +
                                                                    " CAST( "+ Double.parseDouble(paymentTable.getValueAt(tablerow, 5).toString().trim().replaceAll(",", ""))+" AS MONEY), " +
                                                                    " CAST( "+ Double.parseDouble(paymentTable.getValueAt(tablerow, 10).toString().trim().replaceAll(",", ""))+" AS MONEY), " +
                                                                    " CAST( "+ Double.parseDouble(paymentTable.getValueAt(tablerow, 8).toString().trim().replaceAll(",", ""))+" AS MONEY), " +
                                                                    " CAST( "+ df1.format (Double.parseDouble(paymentTable.getValueAt(tablerow, 3).toString().trim().replaceAll(",", "")) - Double.parseDouble(paymentTable.getValueAt(tablerow, 10).toString().trim().replaceAll(",", "")) )+" AS MONEY), " +
                                                                    " '"+ETRACS_BuddyView.user.getText().trim()+"', " +
                                                                    " '"+Integer.parseInt(collRef.getText().trim())+"', " +
                                                                    " '"+dateFormat.format(dateFormat.parse(ETRACS_BuddyView.today.getText().trim()))+"', " +
                                                                    " convert(varchar, getdate(),8), " +
                                                                    " 'Cash', " +
                                                                    " '"+seq+"', " +
                                                                    " '"+municipalOR.getText().trim()+"' )    ");
              
              return true;

        }catch(Exception e){
            e.printStackTrace();
            return false;
        }
        
        
    }



===================================================================
private String generateObjid(String prefix,String tableName)
    {
       String curobjid = "0000000001";
        int val;
        try{
            curobjid = connectEtracs.getSpecificData("SELECT top 1 RTRIM(LTRIM(objid)) FROM  "+tableName.trim()+" WHERE objid like '"+prefix.trim()+"%' order by objid desc");
        }
        catch(Exception e){e.printStackTrace();}
        //javax.swing.JOptionPane.showMessageDialog(null,"curobjid: "+curobjid);
      if(curobjid == null)
      {
          curobjid = "0000000001";
      }
      else
      {
            
            val=Integer.parseInt(curobjid.split("-")[2].trim()) + 1;
            
                if(val>=1 && val<=9){
                     curobjid="000000000" + val;

                 }
                else if(val>=10 && val<=99){
                    curobjid="00000000" + val;
                }
                else if(val>=100 && val<=999){
                    curobjid="0000000" + val;
                }
                else if(val>=1000 && val<=9999){
                    curobjid="000000" + val;
                }
                else if(val>=10000 && val<=99999){
                    curobjid="00000" + val;
                }
                else if(val>=100000 && val<=999999){
                    curobjid="0000" + val;
                }
                else if(val>=1000000 && val<=9999999){
                    curobjid="000" + val;
                }
                else if(val>=10000000 && val<=99999999){
                    curobjid="00" + val;
                }
                else if(val>=100000000 && val<=999999999){
                    curobjid="0" + val;
                }
                else {
                    curobjid=""+val;
                }
            
      }
        
        
        return prefix.trim() + curobjid;
    }
    


===========================================================================

    private String[]  generateTwoObjid(String prefix,String tableName){
        String curobjid = "0000000001" ;
        String gen_objid[] = new String[2];
        gen_objid[0] = prefix + "0000000001";
        gen_objid[1] = prefix + "0000000002";
        int val;
        try{
            curobjid = connectEtracs.getSpecificData("SELECT top 1 RTRIM(LTRIM(objid)) FROM  "+tableName.trim()+" WHERE objid like '"+prefix.trim()+"%' order by objid desc");
        }
        catch(Exception e){e.printStackTrace();}
        //javax.swing.JOptionPane.showMessageDialog(null,"curobjid: "+curobjid);
      if(curobjid == null)
      {
          gen_objid[0] = prefix + "0000000001";
          gen_objid[1] = prefix + "0000000002";
      }
      else
      {
            
            val=Integer.parseInt(curobjid.split("-")[2].trim()) + 1;
            
                if(val>=1 && val<=9){
                     gen_objid[0]="000000000" + val;
                 }
                else if(val>=10 && val<=99){
                    gen_objid[0] = prefix + "00000000" + val;
                }
                else if(val>=100 && val<=999){
                    gen_objid[0] = prefix + "0000000" + val;
                }
                else if(val>=1000 && val<=9999){
                    gen_objid[0]= prefix + "000000" + val;
                }
                else if(val>=10000 && val<=99999){
                    gen_objid[0]= prefix + "00000" + val;
                }
                else if(val>=100000 && val<=999999){
                    gen_objid[0]  = prefix  + "0000" + val;
                }
                else if(val>=1000000 && val<=9999999){
                    gen_objid[0] = prefix + "000" + val;
                }
                else if(val>=10000000 && val<=99999999){
                    gen_objid[0] = prefix + "00" + val;
                }
                else if(val>=100000000 && val<=999999999){
                    gen_objid[0] = prefix + "0" + val;
                }
                else {
                    gen_objid[0] = prefix + ""+val;
                }
            
            val=Integer.parseInt(curobjid.split("-")[2].trim()) + 2;
            
                if(val>=1 && val<=9){
                     gen_objid[1] = prefix + "000000000" + val;
                 }
                else if(val>=10 && val<=99){
                    gen_objid[1] = prefix + "00000000" + val;
                }
                else if(val>=100 && val<=999){
                    gen_objid[1] = prefix + "0000000" + val;
                }
                else if(val>=1000 && val<=9999){
                    gen_objid[1] = prefix + "000000" + val;
                }
                else if(val>=10000 && val<=99999){
                    gen_objid[1] = prefix + "00000" + val;
                }
                else if(val>=100000 && val<=999999){
                    gen_objid[1] = prefix + "0000" + val;
                }
                else if(val>=1000000 && val<=9999999){
                    gen_objid[1] = prefix + "000" + val;
                }
                else if(val>=10000000 && val<=99999999){
                    gen_objid[1] = prefix + "00" + val;
                }
                else if(val>=100000000 && val<=999999999){
                    gen_objid[1] = prefix + "0" + val;
                }
                else {
                    gen_objid[1] = prefix + ""+val;
                }
            
      }
        
        
        return gen_objid;
    }
